<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="XMLDocs.xsl"?>
<XMLDocs>
	<class returnType="">
		<name>JavaLogic</name>
		<Metadata>
			<package>io.github.ayakkus.xmld</package>
			<import>java.io.BufferedReader</import>
			<import>java.io.File</import>
			<import>java.io.FileNotFoundException</import>
			<import>java.io.FileReader</import>
			<import>java.io.IOException</import>
			<import>java.util.ArrayList</import>
			<import>java.util.List</import>
			<import>org.w3c.dom.Attr</import>
			<import>org.w3c.dom.Document</import>
			<import>org.w3c.dom.Element</import>
		</Metadata>
		<Constructors/>
		<Methods>
			<method access="public" modifier0="static" returnType="void">
				<parameter datatype="File">f</parameter>
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="Element">r</parameter>
				<MethodWork name="createXMLFromJava">
					<assignment returnType="String">
						<name>filename</name>
					</assignment>
					<assignment returnType="BufferedReader">
						<name>br2</name>
					</assignment>
					<assignment returnType="String">
						<name>s</name>
					</assignment>
					<assignment returnType="Element">
						<name>root</name>
					</assignment>
					<assignment returnType="Element">
						<name>constructorGroup</name>
					</assignment>
					<assignment returnType="Element">
						<name>methodGroup</name>
					</assignment>
					<assignment returnType="Element">
						<name>fieldGroup</name>
					</assignment>
					<assignment returnType="Element">
						<name>metadata</name>
					</assignment>
					<assignment returnType="BufferedReader">
						<name>br</name>
					</assignment>
					<assignment returnType="List&lt;String&gt;">
						<name>text</name>
					</assignment>
					<assignment returnType="XMLLogic.setChild(fieldGroup,">
						<name>XMLLogic.setChild(XMLLogic.createElement(doc,</name>
					</assignment>
					<assignment returnType="Element">
						<name>method</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="private" modifier0="static" returnType="void">
				<parameter datatype="List&lt;String&gt;">text</parameter>
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="Element">root</parameter>
				<parameter datatype="String">fName</parameter>
				<MethodWork name="testForComments">
					<assignment returnType="List&lt;String&gt;">
						<name>comment</name>
					</assignment>
					<assignment returnType="Element">
						<name>comments</name>
					</assignment>
					<assignment returnType="int">
						<name>indexA</name>
					</assignment>
					<assignment returnType="int">
						<name>indexB</name>
					</assignment>
					<assignment returnType="indexA">
						<name>=</name>
					</assignment>
					<assignment returnType="for(int">
						<name>i</name>
					</assignment>
					<assignment returnType="String">
						<name>t</name>
					</assignment>
					<assignment returnType="Element">
						<name>classCom</name>
					</assignment>
					<assignment returnType="comment">
						<name>=</name>
					</assignment>
					<assignment returnType="indexB">
						<name>=</name>
					</assignment>
					<assignment returnType="for(int">
						<name>i</name>
					</assignment>
					<assignment returnType="String">
						<name>t</name>
					</assignment>
					<assignment returnType="Element">
						<name>conStructCom</name>
					</assignment>
					<assignment returnType="comment">
						<name>=</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="private" modifier0="static" returnType="String">
				<parameter datatype="List&lt;String&gt;">text</parameter>
				<MethodWork name="GetListAsString">
					<assignment returnType="String">
						<name>ret</name>
					</assignment>
					<assignment returnType="ret">
						<name>=</name>
					</assignment>
					<assignment returnType="ret">
						<name>=</name>
					</assignment>
					<assignment returnType="ret">
						<name>=</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="private" modifier0="static" returnType="Element">
				<parameter datatype="BufferedReader">br</parameter>
				<parameter datatype="Element">root</parameter>
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">title</parameter>
				<MethodWork name="getAssignmentsInMethod">
					<assignment returnType="String">
						<name>s</name>
					</assignment>
					<assignment returnType="Element">
						<name>e</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="private" modifier0="static" returnType="Element">
				<parameter datatype="BufferedReader">br</parameter>
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">filename</parameter>
				<MethodWork name="createRootElement"/>
			</method>
			<method access="private" modifier0="static" returnType="Attr[]">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">input</parameter>
				<parameter datatype="boolean">method</parameter>
				<MethodWork name="createAttrs"/>
			</method>
			<method access="private" modifier0="static" returnType="Attr[]">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">input</parameter>
				<MethodWork name="createAttrsF"/>
			</method>
			<method access="private" modifier0="static" returnType="Element">
				<parameter datatype="Element">root</parameter>
				<parameter datatype="String">lineIn</parameter>
				<MethodWork name="generateParameters">
					<assignment returnType="String[]">
						<name>params</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="private" modifier0="static" returnType="String[]">
				<parameter datatype="String">lineIn</parameter>
				<MethodWork name="getParam"/>
			</method>
		</Methods>
		<Fields>
			<field access="public" modifier0="static" modifier1="final" returnType="String[]">
				<fieldName>KEY_WORDS_ACCESS</fieldName>
				<value>new String[]{"public","private","protected"};</value>
			</field>
			<field access="public" modifier0="static" modifier1="final" returnType="String[]">
				<fieldName>KEY_WORDS_TYPE</fieldName>
				<value>new String[]{"class","enum","interface","@interface"};</value>
			</field>
			<field access="public" modifier0="static" modifier1="final" returnType="String[]">
				<fieldName>KEY_WORDS_MOD</fieldName>
				<value>new String[]{"static","volatile","final","abstract","throws","throw"};</value>
			</field>
			<field access="public" modifier0="static" modifier1="final" returnType="String[]">
				<fieldName>KEY_WORDS_DATA_TYPE</fieldName>
				<value>new String[]{"int","long","short","byte","boolean","char", "double","float","void"};</value>
			</field>
		</Fields>
		<JavaLogic-comments>
			<classComment>/** * A Class reader that generates XML elements from keywords in the class. * TODO implement comments * @author Yak * */</classComment>
		</JavaLogic-comments>
	</class>
	<class access="public" returnType="class">
		<name>Launch</name>
		<Metadata>
			<package>io.github.ayakkus.xmld</package>
			<import>javax.swing.SwingUtilities</import>
			<import>javax.swing.UIManager</import>
			<import>javax.swing.plaf.ColorUIResource</import>
		</Metadata>
		<Constructors/>
		<Methods>
			<method access="public" modifier0="static" returnType="void">
				<parameter datatype="String[]">args</parameter>
				<MethodWork name="main"/>
			</method>
		</Methods>
		<Fields/>
		<Launch-comments>
			<classComment>/** * The entry point for the program. * Sets the UI to being the same as my website. * {@link http://a-yakkus.github.io/site/index.html} * @author Jack Stevenson (A-Yakkus) */</classComment>
		</Launch-comments>
	</class>
	<class access="public" returnType="class">
		<name>OptionWindow</name>
		<Metadata>
			<package>io.github.ayakkus.xmld</package>
			<import>java.awt.Color</import>
			<import>java.awt.Image</import>
			<import>java.awt.event.ActionEvent</import>
			<import>java.awt.event.ActionListener</import>
			<import>java.io.File</import>
			<import>java.util.ArrayList</import>
			<import>java.util.List</import>
			<import>javax.swing.ImageIcon</import>
			<import>javax.swing.JButton</import>
			<import>javax.swing.JComboBox</import>
			<import>javax.swing.JFileChooser</import>
			<import>javax.swing.JFrame</import>
			<import>javax.swing.JLabel</import>
			<import>javax.swing.JOptionPane</import>
			<import>javax.swing.JPanel</import>
			<import>javax.swing.JTextField</import>
		</Metadata>
		<Constructors>
			<constructor access="public"/>
		</Constructors>
		<Methods>
			<method access="public" modifier0="static" returnType="List&lt;String&gt;">
				<parameter datatype="File">f</parameter>
				<parameter datatype="String...">types</parameter>
				<MethodWork name="searchForFiles"/>
			</method>
			<method access="public" modifier0="static" returnType="String[]">
				<parameter datatype="String">lang</parameter>
				<MethodWork name="getTypesForLang"/>
			</method>
		</Methods>
		<Fields>
			<field access="public" returnType="Image">
				<fieldName>logo</fieldName>
				<value>new ImageIcon(getClass().getResource("res/logo.png")).getImage();</value>
			</field>
			<field access="public" returnType="String">
				<fieldName>file</fieldName>
				<value>"";</value>
			</field>
			<field access="public" modifier0="static" returnType="List&lt;String&gt;">
				<fieldName>list</fieldName>
				<value>new ArrayList&lt;String&gt;();</value>
			</field>
			<field returnType="JPanel">
				<fieldName>pnl</fieldName>
				<value>new JPanel();</value>
			</field>
			<field returnType="JButton">
				<fieldName>btn1</fieldName>
				<value>new JButton("How to use");</value>
			</field>
			<field returnType="JTextField">
				<fieldName>tf1</fieldName>
				<value>new JTextField(55);</value>
			</field>
			<field returnType="JButton">
				<fieldName>btn</fieldName>
				<value>new JButton("Choose Folder....");</value>
			</field>
			<field returnType="JComboBox&lt;String&gt;">
				<fieldName>lang</fieldName>
				<value>new JComboBox&lt;String&gt;();</value>
			</field>
			<field returnType="JLabel">
				<fieldName>lbl1</fieldName>
				<value>new JLabel("Output File");</value>
			</field>
			<field returnType="JButton">
				<fieldName>okBtn</fieldName>
				<value>new JButton("Create Documentation");</value>
			</field>
		</Fields>
		<OptionWindow-comments>
			<classComment>/** * The window that appears when the program is loaded. * Possibly merge into Launch.java? * @author Jack Stevenson (A-Yakkus) * */</classComment>
			<constructorComment>/** * This is a Constructor</constructorComment>
		</OptionWindow-comments>
	</class>
	<class access="public" returnType="class">
		<name>XMLLogic</name>
		<Metadata>
			<package>io.github.ayakkus.xmld</package>
			<import>java.io.File</import>
			<import>java.io.IOException</import>
			<import>java.util.List</import>
			<import>javax.xml.parsers.DocumentBuilderFactory</import>
			<import>javax.xml.parsers.ParserConfigurationException</import>
			<import>javax.xml.transform.Transformer</import>
			<import>javax.xml.transform.TransformerException</import>
			<import>javax.xml.transform.TransformerFactory</import>
			<import>javax.xml.transform.dom.DOMSource</import>
			<import>javax.xml.transform.stream.StreamResult</import>
			<import>org.w3c.dom.Attr</import>
			<import>org.w3c.dom.Document</import>
			<import>org.w3c.dom.Element</import>
		</Metadata>
		<Constructors/>
		<Methods>
			<method access="public" modifier0="static" returnType="void">
				<parameter datatype="List&lt;String&gt;">files</parameter>
				<parameter datatype="String">handler</parameter>
				<parameter datatype="String">file</parameter>
				<parameter datatype="String">fileRoot</parameter>
				<MethodWork name="create">
					<assignment returnType="Document">
						<name>doc</name>
					</assignment>
					<assignment returnType="Element">
						<name>root</name>
					</assignment>
					<assignment returnType="File">
						<name>f</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="public" modifier0="static" returnType="void">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">output</parameter>
				<parameter datatype="String">outFile</parameter>
				<MethodWork name="createXMLFile">
					<assignment returnType="File">
						<name>f</name>
					</assignment>
				</MethodWork>
			</method>
			<method access="public" modifier0="static" returnType="Element">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">title</parameter>
				<parameter datatype="String">contents</parameter>
				<parameter datatype="Attr...">attributes</parameter>
				<MethodWork name="createElement"/>
			</method>
			<method access="public" modifier0="static" returnType="Element">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">title</parameter>
				<parameter datatype="Attr...">attributes</parameter>
				<MethodWork name="createElement"/>
			</method>
			<method access="public" modifier0="static" returnType="Element">
				<parameter datatype="Element">p</parameter>
				<parameter datatype="Element...">c</parameter>
				<MethodWork name="setChild"/>
			</method>
			<method access="public" modifier0="static" returnType="Attr">
				<parameter datatype="Document">doc</parameter>
				<parameter datatype="String">title</parameter>
				<parameter datatype="String">value</parameter>
				<MethodWork name="createAttribute">
					<assignment returnType="Attr">
						<name>at</name>
					</assignment>
				</MethodWork>
			</method>
		</Methods>
		<Fields/>
		<XMLLogic-comments>
			<classComment/>
		</XMLLogic-comments>
	</class>
</XMLDocs>